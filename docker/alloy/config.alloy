logging {
	level  = "debug"
	format = "logfmt"
}

////////////////////
// LOGS
////////////////////

// CLASSIC LOGS FILES
local.file_match "logs" {
	path_targets = [{"__path__" = "/logs/*.log", "exporter" = "LOGFILE"}]
}

loki.source.file "logfiles" {
	targets    = local.file_match.logs.targets
	forward_to = [loki.write.endpoint.receiver]
}

// JSON LOG FILES
local.file_match "jsonlogs" {
	path_targets = [{"__path__" = "/logs/*.json", "exporter" = "JSONFILE"}]
}

loki.source.file "jsonlogfiles" {
	targets    = local.file_match.jsonlogs.targets
	forward_to = [loki.process.jsonlogs.receiver]
}

loki.process "jsonlogs" {
	forward_to = [loki.write.endpoint.receiver]

	// stage.luhn { }

	stage.json {
		expressions = {
			// timestamp   = "timestamp",
			application = "context.properties.applicationName",
			instance    = "context.properties.instance",
			trace_id    = "mdc.trace_id",
		}
	}

	stage.labels {
		values = {
			application = "application",
			instance    = "instance",
			trace_id    = "trace_id",
		}
	}

	/*stage.timestamp {
		source = "timestamp"
		format = "RFC3339"
		fallback_formats = ["UnixMs",]
	}*/

  /*stage.luhn {
    		min_length  = 13
    		replacement = "**MASKED**"
    	}
    	*/
}

// EXPORTER (LOKI)
loki.write "endpoint" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
}

/////////////////////////
// AGENT OTEL & TRACES
/////////////////////////

// RECEIVER (OTLP)
otelcol.receiver.otlp "default" {
	grpc {
		endpoint = "0.0.0.0:4317"
	}

	http {
		endpoint = "0.0.0.0:4318"
	}

	output {
		metrics = [otelcol.processor.batch.default.input]
		logs    = [otelcol.processor.batch.default.input]
		traces  = [otelcol.processor.tail_sampling.actuator.input]
	}
}

otelcol.processor.tail_sampling "actuator" {
	policy {
		name = "filter_http_url"
		type = "string_attribute"
		string_attribute {
			key = "http.url"
			values = ["/actuator/health", "/actuator/prometheus"]
			enabled_regex_matching = true
			invert_match = true
		}
	}

	policy {
		name = "filter_url_path"
		type = "string_attribute"
		string_attribute {
			key = "url.path"
			values = ["/actuator/health", "/actuator/prometheus"]
			enabled_regex_matching = true
			invert_match = true
		}
	}

	output {
		traces = [otelcol.processor.batch.default.input]
	}
}

otelcol.processor.batch "default" {
	output {
		metrics = [otelcol.exporter.prometheus.default.input]
		logs    = [otelcol.exporter.loki.default.input]
		traces  = [otelcol.exporter.otlp.tempo.input]
	}
}

// TRACES EXPORTER (OTLP)
otelcol.exporter.otlp "tempo" {
	client {
		endpoint = "tempo:4317"

		tls {
			insecure = true
		}
	}
}

// METRICS EXPORTER (PROMETHEUS)
otelcol.exporter.prometheus "default" {
	forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
	endpoint {
		url = "http://prometheus:9090/api/v1/write"
	}
}

// LOGS EXPORTER (LOKI)
otelcol.exporter.loki "default" {
	forward_to = [loki.write.endpoint.receiver]
}
