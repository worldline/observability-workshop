services:
  config-server:
    image: config-server:latest
    hostname: config-server
    container_name: config-server
    build:
      context: .
      dockerfile: ./config-server/src/main/docker/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    environment:
      SPRING_PROFILES_ACTIVE: default,native,docker,json-logging
      OTEL_JAVAAGENT_ENABLED: false
      OTEL_SERVICE_NAME: config-server
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    ports:
      - 8888:8888
    healthcheck:
      test: curl --fail http://localhost:8890/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s

  discovery-server:
    image: discovery-server:latest
    hostname: discovery-server
    container_name: discovery-server
    build:
      context: .
      dockerfile: ./discovery-server/src/main/docker/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    ports:
      - 8761:8761
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      OTEL_SERVICE_NAME: discovery-server
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8761/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s
    
  api-gateway:
    image: api-gateway:latest
    hostname: api-gateway
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./api-gateway/src/main/docker/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    ports:
      - 8080:8080
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      #SPRING_PROFILES_ACTIVE: default,docker
      #SPRING_PROFILES_ACTIVE: default,docker,logfmt-logging
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      OTEL_SERVICE_NAME: api-gateway
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s
  
  easypay-service:
    image: easypay-service:latest
    hostname: easypay-service
    container_name: easypay-service
    build:
      context: .
      dockerfile: ./easypay-service/src/main/docker/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      SPRING_PROFILES_ACTIVE: default,docker
      OTEL_SERVICE_NAME: easypay-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres-easypay:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s
  
  smartbank-gateway:
    image: smartbank-gateway:latest
    hostname: smartbank-gateway
    container_name: smartbank-gateway
    build:
      context: .
      dockerfile: ./smartbank-gateway/src/main/docker/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      SPRING_PROFILES_ACTIVE: default,docker
      OTEL_SERVICE_NAME: smartbank-gateway
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres-smartbank:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s

  fraudetect-service:
    image: fraudetect-service:latest
    hostname: fraudetect
    container_name: fraudetect
    build:
      context: .
      dockerfile: ./fraudetect-service/src/main/docker/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      #SPRING_PROFILES_ACTIVE: default,docker
      #SPRING_PROFILES_ACTIVE: default,docker,logfmt-logging
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      SERVER_PORT: 8080
      OTEL_SERVICE_NAME: fraudetect-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres-fraudetect:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 3s
      timeout: 1s
      retries: 5
      start_period: 3s
  
  merchant-backoffice:
    image: merchant-backoffice:latest
    hostname: merchant-backoffice
    container_name: merchant-backoffice
    build:
      context: .
      dockerfile: ./merchant-backoffice/src/main/docker/Dockerfile
      args:
        UID: ${UID:-1000}
        GID: ${GID:-1000}
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      OTEL_SERVICE_NAME: merchant-backoffice
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres-merchantbo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 3s
      timeout: 1s
      retries: 5
      start_period: 3s

  collector:
    image: grafana/alloy:latest
    volumes:
      - ./logs:/logs
      - ./docker/alloy/config.alloy:/etc/alloy/config.alloy
    ports:
      - 4317:4317
      - 4318:4318
      - 12345:12345
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - /etc/alloy/config.alloy
  
  loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    volumes:
      - ./docker/loki/local-config.yaml:/etc/loki/local-config.yaml
    command:
      - -config.file=/etc/loki/local-config.yaml
  
  prometheus:
    image: prom/prometheus:v2.52.0
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
      - --web.enable-remote-write-receiver
      - --enable-feature=otlp-write-receiver

  tempo:
    image: grafana/tempo:latest
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "9411:9411"   # zipkin
    volumes:
      - ./docker/tempo/config.yaml:/etc/tempo/config.yaml
    command:
      - -config.file=/etc/tempo/config.yaml

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./docker/grafana/datasources:/etc/grafana/provisioning/dashboards
    entrypoint:
      - sh
      - -xeuc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: true
          jsonData:
            derivedFields:
              - datasourceUid: tempo
                matcherRegex: 'trace_id'
                matcherType: 'label'
                name: TraceID
                urlDisplayLabel: 'View Trace'
        - name: Prometheus
          type: prometheus
          uid: prometheus
          access: proxy
          orgId: 1
          url: http://prometheus:9090
          basicAuth: false
          isDefault: false
          version: 1
          editable: true
          jsonData:
            httpMethod: GET
            exemplarTraceIdDestinations:
              - datasourceUid: tempo
                name: TraceID
        - name: Tempo
          type: tempo
          access: proxy
          orgId: 1
          url: http://tempo:3200
          basicAuth: false
          isDefault: false
          version: 1
          editable: true
          apiVersion: 1
          uid: tempo
          jsonData:
            httpMethod: GET
            serviceMap:
              datasourceUid: prometheus
            tracesToLogsV2:
              datasourceUid: loki
              filterBySpanID: false
              filterByTraceID: true
              tags:
              - application
            tracesToMetrics:
              datasourceUid: prometheus
              tags:
              - application
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"

  postgres-easypay:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: easypay
      POSTGRES_USER: easypay
      POSTGRES_PASSWORD: easypay
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U easypay"]
      interval: 5s
      timeout: 1s
      retries: 5
  
  postgres-smartbank:
    image: postgres:16
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: smartbank
      POSTGRES_USER: smartbank
      POSTGRES_PASSWORD: smartbank
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartbank"]
      interval: 5s
      timeout: 1s
      retries: 5
  
  postgres-fraudetect:
    image: postgres:16
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: fraudetect
      POSTGRES_USER: fraudetect
      POSTGRES_PASSWORD: fraudetect
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraudetect"]
      interval: 5s
      timeout: 1s
      retries: 5

  postgres-merchantbo:
    image: postgres:16
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: merchantbo
      POSTGRES_USER: merchantbo
      POSTGRES_PASSWORD: merchantbo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U merchantbo"]
      interval: 5s
      timeout: 1s
      retries: 5
      
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    hostname: kafka
    container_name: kafka
    ports:
      - "19092:19092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5