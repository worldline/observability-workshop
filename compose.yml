services:
  config-server:
    image: config-server:latest
    build:
      context: .
      dockerfile: ./config-server/src/main/docker/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: default,native,docker,json-logging
      OTEL_JAVAAGENT_ENABLED: false
      OTEL_SERVICE_NAME: config-server
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    ports:
      - 8888:8888
    healthcheck:
      test: curl --fail http://localhost:8890/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s

  discovery-server:
    image: discovery-server:latest
    build:
      context: .
      dockerfile: ./discovery-server/src/main/docker/Dockerfile
    ports:
      - 8761:8761
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      OTEL_SERVICE_NAME: discovery-server
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8761/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s
    
  api-gateway:
    image: api-gateway:latest
    build:
      context: .
      dockerfile: ./api-gateway/src/main/docker/Dockerfile
      args:
        - UID=1000
        - GID=1000
    ports:
      - 8080:8080
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      #SPRING_PROFILES_ACTIVE: default,docker
      #SPRING_PROFILES_ACTIVE: default,docker,logfmt-logging
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      OTEL_SERVICE_NAME: api-gateway
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 5s

  fraudetect:
    image: fraudetect-service:latest
    build:
      context: .
      dockerfile: ./fraudetect-service/src/main/docker/Dockerfile
      args:
        - UID=1000
        - GID=1000
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      #SPRING_PROFILES_ACTIVE: default,docker
      #SPRING_PROFILES_ACTIVE: default,docker,logfmt-logging
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      SERVER_PORT: 8080
      OTEL_SERVICE_NAME: fraudetect-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres-fraudetect:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 3s
      timeout: 1s
      retries: 5
      start_period: 3s
  
  merchantbo:
    image: merchant-backoffice:latest
    build:
      context: .
      dockerfile: ./merchant-backoffice/src/main/docker/Dockerfile
      args:
        - UID=1000
        - GID=1000
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      SPRING_PROFILES_ACTIVE: default,docker,json-logging
      OTEL_SERVICE_NAME: merchant-backoffice
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_RESOURCE_ATTRIBUTES: "source=agent"
    volumes:
      - ./logs:/logs
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgres-merchantbo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health
      interval: 3s
      timeout: 1s
      retries: 5
      start_period: 3s

  collector:
    image: grafana/alloy:latest
    volumes:
      - ./logs:/logs
      - ./docker/alloy/config.alloy:/etc/alloy/config.alloy
    ports:
      - 4317:4317
      - 4318:4318
      - 12345:12345
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - /etc/alloy/config.alloy
  
  loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    command:
      - -config.file=/etc/loki/local-config.yaml
  
  prometheus:
    image: prom/prometheus:v2.52.0
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
      - --web.enable-remote-write-receiver
      - --enable-feature=otlp-write-receiver

  tempo:
    image: grafana/tempo:latest
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      - "9411:9411"   # zipkin
    volumes:
      - ./docker/tempo/config.yaml:/etc/tempo/config.yaml
    command:
      - -config.file=/etc/tempo/config.yaml

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
        - name: Prometheus
          type: prometheus
          uid: prometheus
          access: proxy
          orgId: 1
          url: http://prometheus:9090
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
          jsonData:
            httpMethod: GET
        - name: Tempo
          type: tempo
          access: proxy
          orgId: 1
          url: http://tempo:3200
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
          apiVersion: 1
          uid: tempo
          jsonData:
            httpMethod: GET
            serviceMap:
              datasourceUid: prometheus
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"

  postgres-easypay:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: easypay
      POSTGRES_USER: easypay
      POSTGRES_PASSWORD: easypay
  
  postgres-smartbank:
    image: postgres:16
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: smartbank
      POSTGRES_USER: smartbank
      POSTGRES_PASSWORD: smartbank
  
  postgres-fraudetect:
    image: postgres:16
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: fraudetect
      POSTGRES_USER: fraudetect
      POSTGRES_PASSWORD: fraudetect
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraudetect"]
      interval: 5s
      timeout: 1s
      retries: 5

  postgres-merchantbo:
    image: postgres:16
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: merchantbo
      POSTGRES_USER: merchantbo
      POSTGRES_PASSWORD: merchantbo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U merchantbo"]
      interval: 5s
      timeout: 1s
      retries: 5
      
  kafka:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.3
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://kafka:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://kafka:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr kafka:33145
      - --advertise-rpc-addr kafka:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk status"]
      interval: 10s
      timeout: 5s
      retries: 5